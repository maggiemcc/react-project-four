{"ast":null,"code":"var _jsxFileName = \"/Users/maggiemccausland/Documents/GitHub/react-project-four/src/contexts/BreakingBadContext.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BreakingBadContext = /*#__PURE__*/React.createContext({\n  characters: [],\n  quotes: []\n});\nexport const BreakingBadContextProvider = props => {\n  _s();\n\n  const [characters, setCharacters] = React.useState([]);\n  const [quotes, setQuotes] = React.useState([]);\n  React.useEffect(() => {\n    const fetchBreakingBad = async () => {\n      const charactersURL = `/.netlify/functions/breakingBad?option=characters`;\n      const quotesURL = `/.netlify/functions/breakingBad?option=quotes`;\n\n      try {\n        const charactersResponse = await axios.get(charactersURL);\n        const characters = await charactersResponse.data;\n        setCharacters(characters);\n        const quotesResponse = await axios.get(quotesURL);\n        const quotes = await quotesResponse.data;\n        setQuotes(quotes);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchBreakingBad();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BreakingBadContext.Provider, {\n    value: {\n      characters,\n      quotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BreakingBadContextProvider, \"4uLL6f+g3sPegFp0zJzILNLw7Ok=\");\n\n_c = BreakingBadContextProvider;\nexport const useBreakingBadContext = () => {\n  _s2();\n\n  return React.useContext(BreakingBadContext);\n};\n\n_s2(useBreakingBadContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"BreakingBadContextProvider\");","map":{"version":3,"sources":["/Users/maggiemccausland/Documents/GitHub/react-project-four/src/contexts/BreakingBadContext.js"],"names":["React","axios","BreakingBadContext","createContext","characters","quotes","BreakingBadContextProvider","props","setCharacters","useState","setQuotes","useEffect","fetchBreakingBad","charactersURL","quotesURL","charactersResponse","get","data","quotesResponse","error","console","log","children","useBreakingBadContext","useContext"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,kBAAkB,gBAAGF,KAAK,CAACG,aAAN,CAAoB;AAC7CC,EAAAA,UAAU,EAAE,EADiC;AAE7CC,EAAAA,MAAM,EAAE;AAFqC,CAApB,CAA3B;AAKA,OAAO,MAAMC,0BAA0B,GAAIC,KAAD,IAAW;AAAA;;AACnD,QAAM,CAACH,UAAD,EAAaI,aAAb,IAA8BR,KAAK,CAACS,QAAN,CAAe,EAAf,CAApC;AACA,QAAM,CAACJ,MAAD,EAASK,SAAT,IAAsBV,KAAK,CAACS,QAAN,CAAe,EAAf,CAA5B;AAEAT,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpB,UAAMC,gBAAgB,GAAG,YAAY;AACnC,YAAMC,aAAa,GAAI,mDAAvB;AACA,YAAMC,SAAS,GAAI,+CAAnB;;AAEA,UAAI;AACF,cAAMC,kBAAkB,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAUH,aAAV,CAAjC;AACA,cAAMT,UAAU,GAAG,MAAMW,kBAAkB,CAACE,IAA5C;AACAT,QAAAA,aAAa,CAACJ,UAAD,CAAb;AAEA,cAAMc,cAAc,GAAG,MAAMjB,KAAK,CAACe,GAAN,CAAUF,SAAV,CAA7B;AACA,cAAMT,MAAM,GAAG,MAAMa,cAAc,CAACD,IAApC;AACAP,QAAAA,SAAS,CAACL,MAAD,CAAT;AACD,OARD,CASA,OAAOc,KAAP,EAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,KAhBD;;AAiBAP,IAAAA,gBAAgB;AACjB,GAnBD,EAmBG,EAnBH;AAqBA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAClCR,MAAAA,UADkC;AAElCC,MAAAA;AAFkC,KAApC;AAAA,cAIGE,KAAK,CAACe;AAJT;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAjCM;;GAAMhB,0B;;KAAAA,0B;AAmCb,OAAO,MAAMiB,qBAAqB,GAAG;AAAA;;AAAA,SAAMvB,KAAK,CAACwB,UAAN,CAAiBtB,kBAAjB,CAAN;AAAA,CAA9B;;IAAMqB,qB","sourcesContent":["import * as React from 'react';\nimport axios from 'axios';\n\nconst BreakingBadContext = React.createContext({\n  characters: [],\n  quotes: [],\n})\n\nexport const BreakingBadContextProvider = (props) => {\n  const [characters, setCharacters] = React.useState([]);\n  const [quotes, setQuotes] = React.useState([]);\n\n  React.useEffect(() => {\n    const fetchBreakingBad = async () => {\n      const charactersURL = `/.netlify/functions/breakingBad?option=characters`\n      const quotesURL = `/.netlify/functions/breakingBad?option=quotes`\n\n      try {\n        const charactersResponse = await axios.get(charactersURL);\n        const characters = await charactersResponse.data;\n        setCharacters(characters);\n\n        const quotesResponse = await axios.get(quotesURL);\n        const quotes = await quotesResponse.data;\n        setQuotes(quotes);\n      } \n      catch (error) {\n        console.log(error)\n      }\n    }\n    fetchBreakingBad()\n  }, [])\n\n  return (\n    <BreakingBadContext.Provider value={{\n      characters,\n      quotes,\n    }}>\n      {props.children}\n    </BreakingBadContext.Provider>\n  )\n}\n\nexport const useBreakingBadContext = () => React.useContext(BreakingBadContext)"]},"metadata":{},"sourceType":"module"}